//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;
using Object = UnityEngine.Object;

public class ResourceMgrWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ResourceMgr), typeof(Singleton<ResourceMgr>));
		L.RegFunction("LoadConfigs", LoadConfigs);
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("LoadSceneAsync", LoadSceneAsync);
		L.RegFunction("CloseScene", CloseScene);
		L.RegFunction("CreateGameObject", CreateGameObject);
		L.RegFunction("InstantiateGameObj", InstantiateGameObj);
		L.RegFunction("OnDestroyInstObject", OnDestroyInstObject);
		L.RegFunction("DestroyInstGameObj", DestroyInstGameObj);
		L.RegFunction("CoroutneAudioClipABUnloadFalse", CoroutneAudioClipABUnloadFalse);
		L.RegFunction("CoroutineEndFrameABUnloadFalse", CoroutineEndFrameABUnloadFalse);
		L.RegFunction("ABUnloadTrue", ABUnloadTrue);
		L.RegFunction("ABUnloadFalse", ABUnloadFalse);
		L.RegFunction("DestroyObject", DestroyObject);
		L.RegFunction("LoadPrefab", LoadPrefab);
		L.RegFunction("LoadPrefabAsync", LoadPrefabAsync);
		L.RegFunction("CreateGameObjectAsync", CreateGameObjectAsync);
		L.RegFunction("LoadTexture", LoadTexture);
		L.RegFunction("LoadTextureAsync", LoadTextureAsync);
		L.RegFunction("LoadMaterial", LoadMaterial);
		L.RegFunction("LoadMaterialAsync", LoadMaterialAsync);
		L.RegFunction("LoadAudioClip", LoadAudioClip);
		L.RegFunction("LoadAudioClipAsync", LoadAudioClipAsync);
		L.RegFunction("LoadBytes", LoadBytes);
		L.RegFunction("LoadText", LoadText);
		L.RegFunction("LoadTextAsync", LoadTextAsync);
		L.RegFunction("LoadAnimationClip", LoadAnimationClip);
		L.RegFunction("LoadAnimationClipAsync", LoadAnimationClipAsync);
		L.RegFunction("LoadAniController", LoadAniController);
		L.RegFunction("LoadAniControllerAsync", LoadAniControllerAsync);
		L.RegFunction("LoadShader", LoadShader);
		L.RegFunction("LoadShaderAsync", LoadShaderAsync);
		L.RegFunction("LoadFont", LoadFont);
		L.RegFunction("LoadFontAsync", LoadFontAsync);
		L.RegFunction("PreLoadAndBuildAssetBundleShaders", PreLoadAndBuildAssetBundleShaders);
		L.RegFunction("PreLoadAssetBundle", PreLoadAssetBundle);
		L.RegFunction("DestroySprites", DestroySprites);
		L.RegFunction("DestroyObjects", DestroyObjects);
		L.RegFunction("LoadSprites", LoadSprites);
		L.RegFunction("LoadSpritesAsync", LoadSpritesAsync);
		L.RegFunction("LoadScriptableObject", LoadScriptableObject);
		L.RegFunction("LoadScriptableObjectAsync", LoadScriptableObjectAsync);
		L.RegFunction("LoadShaderVarCollection", LoadShaderVarCollection);
		L.RegFunction("LoadShaderVarCollectionAsync", LoadShaderVarCollectionAsync);
		L.RegFunction("UnloadUnUsed", UnloadUnUsed);
		L.RegFunction("OnApplicationQuit", OnApplicationQuit);
		L.RegFunction("AutoUpdateClear", AutoUpdateClear);
		L.RegFunction("GetABShaderFileNameByName", GetABShaderFileNameByName);
		L.RegFunction("GetAssetBundleFileName", GetAssetBundleFileName);
		L.RegFunction("New", _CreateResourceMgr);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("AssetLoader", get_AssetLoader, null);
		L.RegVar("ResLoader", get_ResLoader, null);
		L.RegVar("IsQuitApp", get_IsQuitApp, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateResourceMgr(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ResourceMgr obj = new ResourceMgr();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ResourceMgr.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadConfigs(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				System.Action<bool> arg0 = (System.Action<bool>)ToLua.CheckDelegate<System.Action<bool>>(L, 2);
				obj.LoadConfigs(arg0);
				return 0;
			}
			else if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				System.Action<bool> arg0 = (System.Action<bool>)ToLua.CheckDelegate<System.Action<bool>>(L, 2);
				UnityEngine.MonoBehaviour arg1 = (UnityEngine.MonoBehaviour)ToLua.CheckObject<UnityEngine.MonoBehaviour>(L, 3);
				obj.LoadConfigs(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				System.Action<bool> arg0 = (System.Action<bool>)ToLua.CheckDelegate<System.Action<bool>>(L, 2);
				UnityEngine.MonoBehaviour arg1 = (UnityEngine.MonoBehaviour)ToLua.CheckObject<UnityEngine.MonoBehaviour>(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.LoadConfigs(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadConfigs");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			bool o = obj.LoadScene(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSceneAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Action<UnityEngine.AsyncOperation,bool> arg2 = (System.Action<UnityEngine.AsyncOperation,bool>)ToLua.CheckDelegate<System.Action<UnityEngine.AsyncOperation,bool>>(L, 4);
				bool o = obj.LoadSceneAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Action<UnityEngine.AsyncOperation,bool> arg2 = (System.Action<UnityEngine.AsyncOperation,bool>)ToLua.CheckDelegate<System.Action<UnityEngine.AsyncOperation,bool>>(L, 4);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				bool o = obj.LoadSceneAsync(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 6)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Action<UnityEngine.AsyncOperation,bool> arg2 = (System.Action<UnityEngine.AsyncOperation,bool>)ToLua.CheckDelegate<System.Action<UnityEngine.AsyncOperation,bool>>(L, 4);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
				bool o = obj.LoadSceneAsync(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadSceneAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.CloseScene(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateGameObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject o = obj.CreateGameObject(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.GameObject o = obj.CreateGameObject(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 4);
				UnityEngine.GameObject o = obj.CreateGameObject(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.GameObject o = obj.CreateGameObject(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.CreateGameObject");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InstantiateGameObj(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				UnityEngine.GameObject o = obj.InstantiateGameObj(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.GameObject o = obj.InstantiateGameObj(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 4);
				UnityEngine.GameObject o = obj.InstantiateGameObj(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
				UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				UnityEngine.GameObject o = obj.InstantiateGameObj(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.InstantiateGameObj");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroyInstObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.OnDestroyInstObject(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GameObject>(L, 2))
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				obj.OnDestroyInstObject(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.OnDestroyInstObject");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyInstGameObj(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				obj.DestroyInstGameObj(arg0);
				return 0;
			}
			else if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.DestroyInstGameObj(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.DestroyInstGameObj");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CoroutneAudioClipABUnloadFalse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioClip));
			UnityEngine.MonoBehaviour arg1 = (UnityEngine.MonoBehaviour)ToLua.CheckObject<UnityEngine.MonoBehaviour>(L, 3);
			obj.CoroutneAudioClipABUnloadFalse(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CoroutineEndFrameABUnloadFalse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
				UnityEngine.MonoBehaviour arg1 = (UnityEngine.MonoBehaviour)ToLua.CheckObject<UnityEngine.MonoBehaviour>(L, 3);
				obj.CoroutineEndFrameABUnloadFalse(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
				UnityEngine.MonoBehaviour arg1 = (UnityEngine.MonoBehaviour)ToLua.CheckObject<UnityEngine.MonoBehaviour>(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.CoroutineEndFrameABUnloadFalse(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.CoroutineEndFrameABUnloadFalse");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ABUnloadTrue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
			obj.ABUnloadTrue(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ABUnloadFalse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Object>(L, 2))
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 2);
				bool o = obj.ABUnloadFalse(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Object[]>(L, 2))
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.Object[] arg0 = ToLua.ToObjectArray<UnityEngine.Object>(L, 2);
				obj.ABUnloadFalse(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Object[], bool>(L, 2))
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.Object[] arg0 = ToLua.ToObjectArray<UnityEngine.Object>(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.ABUnloadFalse(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Object, bool>(L, 2))
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				bool o = obj.ABUnloadFalse(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.ABUnloadFalse");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
				obj.DestroyObject(arg0);
				return 0;
			}
			else if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.DestroyObject(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.DestroyObject");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPrefab(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
			UnityEngine.GameObject o = obj.LoadPrefab(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPrefabAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.GameObject> arg1 = (System.Action<float,bool,UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.GameObject>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				bool o = obj.LoadPrefabAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.GameObject> arg1 = (System.Action<float,bool,UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.GameObject>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.LoadPrefabAsync(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadPrefabAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateGameObjectAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.GameObject> arg1 = (System.Action<float,bool,UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.GameObject>>(L, 3);
				bool o = obj.CreateGameObjectAsync(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<float, System.Action<float,bool,UnityEngine.GameObject>>(L, 3))
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				System.Action<float,bool,UnityEngine.GameObject> arg2 = (System.Action<float,bool,UnityEngine.GameObject>)ToLua.ToObject(L, 4);
				bool o = obj.CreateGameObjectAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Action<float,bool,UnityEngine.GameObject>, int>(L, 3))
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.GameObject> arg1 = (System.Action<float,bool,UnityEngine.GameObject>)ToLua.ToObject(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				bool o = obj.CreateGameObjectAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				System.Action<float,bool,UnityEngine.GameObject> arg2 = (System.Action<float,bool,UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.GameObject>>(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.CreateGameObjectAsync(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.CreateGameObjectAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
			UnityEngine.Texture o = obj.LoadTexture(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTextureAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.Texture> arg1 = (System.Action<float,bool,UnityEngine.Texture>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.Texture>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				bool o = obj.LoadTextureAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.Texture> arg1 = (System.Action<float,bool,UnityEngine.Texture>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.Texture>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.LoadTextureAsync(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadTextureAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMaterial(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
			UnityEngine.Material o = obj.LoadMaterial(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMaterialAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.Material> arg1 = (System.Action<float,bool,UnityEngine.Material>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.Material>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				bool o = obj.LoadMaterialAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.Material> arg1 = (System.Action<float,bool,UnityEngine.Material>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.Material>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.LoadMaterialAsync(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadMaterialAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAudioClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
			UnityEngine.AudioClip o = obj.LoadAudioClip(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAudioClipAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.AudioClip> arg1 = (System.Action<float,bool,UnityEngine.AudioClip>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.AudioClip>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				bool o = obj.LoadAudioClipAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.AudioClip> arg1 = (System.Action<float,bool,UnityEngine.AudioClip>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.AudioClip>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.LoadAudioClipAsync(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadAudioClipAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				byte[] o = obj.LoadBytes(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
				byte[] o = obj.LoadBytes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string o = obj.LoadText(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
				string o = obj.LoadText(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadText");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTextAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.TextAsset> arg1 = (System.Action<float,bool,UnityEngine.TextAsset>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.TextAsset>>(L, 3);
				bool o = obj.LoadTextAsync(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.TextAsset> arg1 = (System.Action<float,bool,UnityEngine.TextAsset>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.TextAsset>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				bool o = obj.LoadTextAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.TextAsset> arg1 = (System.Action<float,bool,UnityEngine.TextAsset>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.TextAsset>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.LoadTextAsync(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadTextAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAnimationClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
			UnityEngine.AnimationClip o = obj.LoadAnimationClip(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAnimationClipAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.AnimationClip> arg1 = (System.Action<float,bool,UnityEngine.AnimationClip>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.AnimationClip>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				bool o = obj.LoadAnimationClipAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.AnimationClip> arg1 = (System.Action<float,bool,UnityEngine.AnimationClip>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.AnimationClip>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.LoadAnimationClipAsync(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadAnimationClipAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAniController(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
			UnityEngine.RuntimeAnimatorController o = obj.LoadAniController(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAniControllerAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.RuntimeAnimatorController> arg1 = (System.Action<float,bool,UnityEngine.RuntimeAnimatorController>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.RuntimeAnimatorController>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				bool o = obj.LoadAniControllerAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.RuntimeAnimatorController> arg1 = (System.Action<float,bool,UnityEngine.RuntimeAnimatorController>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.RuntimeAnimatorController>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.LoadAniControllerAsync(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadAniControllerAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadShader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
			UnityEngine.Shader o = obj.LoadShader(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadShaderAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.Shader> arg1 = (System.Action<float,bool,UnityEngine.Shader>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.Shader>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				bool o = obj.LoadShaderAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.Shader> arg1 = (System.Action<float,bool,UnityEngine.Shader>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.Shader>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.LoadShaderAsync(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadShaderAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFont(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
			UnityEngine.Font o = obj.LoadFont(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFontAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.Font> arg1 = (System.Action<float,bool,UnityEngine.Font>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.Font>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				bool o = obj.LoadFontAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.Font> arg1 = (System.Action<float,bool,UnityEngine.Font>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.Font>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.LoadFontAsync(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadFontAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PreLoadAndBuildAssetBundleShaders(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool o = obj.PreLoadAndBuildAssetBundleShaders(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				bool o = obj.PreLoadAndBuildAssetBundleShaders(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				bool o = obj.PreLoadAndBuildAssetBundleShaders(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.PreLoadAndBuildAssetBundleShaders");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PreLoadAssetBundle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Type arg1 = ToLua.CheckMonoType(L, 3);
				bool o = obj.PreLoadAssetBundle(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Type arg1 = ToLua.CheckMonoType(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				bool o = obj.PreLoadAssetBundle(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Type arg1 = ToLua.CheckMonoType(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.PreLoadAssetBundle(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.PreLoadAssetBundle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroySprites(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.Sprite[] arg0 = ToLua.CheckObjectArray<UnityEngine.Sprite>(L, 2);
				obj.DestroySprites(arg0);
				return 0;
			}
			else if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.Sprite[] arg0 = ToLua.CheckObjectArray<UnityEngine.Sprite>(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.DestroySprites(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.DestroySprites");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyObjects(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.Object[] arg0 = ToLua.CheckObjectArray<UnityEngine.Object>(L, 2);
				obj.DestroyObjects(arg0);
				return 0;
			}
			else if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				UnityEngine.Object[] arg0 = ToLua.CheckObjectArray<UnityEngine.Object>(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.DestroyObjects(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.DestroyObjects");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSprites(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Sprite[] o = obj.LoadSprites(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSpritesAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.Object[]> arg1 = (System.Action<float,bool,UnityEngine.Object[]>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.Object[]>>(L, 3);
				bool o = obj.LoadSpritesAsync(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.Object[]> arg1 = (System.Action<float,bool,UnityEngine.Object[]>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.Object[]>>(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				bool o = obj.LoadSpritesAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadSpritesAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScriptableObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
			UnityEngine.ScriptableObject o = obj.LoadScriptableObject(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScriptableObjectAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
				System.Action<float,bool,UnityEngine.ScriptableObject> arg2 = (System.Action<float,bool,UnityEngine.ScriptableObject>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.ScriptableObject>>(L, 4);
				bool o = obj.LoadScriptableObjectAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
				System.Action<float,bool,UnityEngine.ScriptableObject> arg2 = (System.Action<float,bool,UnityEngine.ScriptableObject>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.ScriptableObject>>(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.LoadScriptableObjectAsync(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadScriptableObjectAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadShaderVarCollection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ResourceCacheType arg1 = (ResourceCacheType)ToLua.CheckObject(L, 3, typeof(ResourceCacheType));
			UnityEngine.ShaderVariantCollection o = obj.LoadShaderVarCollection(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadShaderVarCollectionAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.ShaderVariantCollection> arg1 = (System.Action<float,bool,UnityEngine.ShaderVariantCollection>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.ShaderVariantCollection>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				bool o = obj.LoadShaderVarCollectionAsync(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action<float,bool,UnityEngine.ShaderVariantCollection> arg1 = (System.Action<float,bool,UnityEngine.ShaderVariantCollection>)ToLua.CheckDelegate<System.Action<float,bool,UnityEngine.ShaderVariantCollection>>(L, 3);
				ResourceCacheType arg2 = (ResourceCacheType)ToLua.CheckObject(L, 4, typeof(ResourceCacheType));
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = obj.LoadShaderVarCollectionAsync(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ResourceMgr.LoadShaderVarCollectionAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadUnUsed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			obj.UnloadUnUsed();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnApplicationQuit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			obj.OnApplicationQuit();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AutoUpdateClear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			obj.AutoUpdateClear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetABShaderFileNameByName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetABShaderFileNameByName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAssetBundleFileName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ResourceMgr obj = (ResourceMgr)ToLua.CheckObject<ResourceMgr>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetAssetBundleFileName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetLoader(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResourceMgr obj = (ResourceMgr)o;
			IResourceLoader ret = obj.AssetLoader;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AssetLoader on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResLoader(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResourceMgr obj = (ResourceMgr)o;
			IResourceLoader ret = obj.ResLoader;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResLoader on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsQuitApp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResourceMgr obj = (ResourceMgr)o;
			bool ret = obj.IsQuitApp;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsQuitApp on a nil value");
		}
	}
}

