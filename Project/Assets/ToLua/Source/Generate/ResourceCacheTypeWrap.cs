//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ResourceCacheTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(ResourceCacheType));
		L.RegVar("rctNone", get_rctNone, null);
		L.RegVar("rctTemp", get_rctTemp, null);
		L.RegVar("rctRefAdd", get_rctRefAdd, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<ResourceCacheType>.Check = CheckType;
		StackTraits<ResourceCacheType>.Push = Push;
	}

	static void Push(IntPtr L, ResourceCacheType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(ResourceCacheType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rctNone(IntPtr L)
	{
		ToLua.Push(L, ResourceCacheType.rctNone);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rctTemp(IntPtr L)
	{
		ToLua.Push(L, ResourceCacheType.rctTemp);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rctRefAdd(IntPtr L)
	{
		ToLua.Push(L, ResourceCacheType.rctRefAdd);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		ResourceCacheType o = (ResourceCacheType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

