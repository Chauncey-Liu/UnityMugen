//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Mugen_AI_TypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Mugen.AI_Type));
		L.RegVar("none", get_none, null);
		L.RegVar("VarSet", get_VarSet, null);
		L.RegVar("ChangeState", get_ChangeState, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<Mugen.AI_Type>.Check = CheckType;
		StackTraits<Mugen.AI_Type>.Push = Push;
	}

	static void Push(IntPtr L, Mugen.AI_Type arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(Mugen.AI_Type), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_none(IntPtr L)
	{
		ToLua.Push(L, Mugen.AI_Type.none);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VarSet(IntPtr L)
	{
		ToLua.Push(L, Mugen.AI_Type.VarSet);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ChangeState(IntPtr L)
	{
		ToLua.Push(L, Mugen.AI_Type.ChangeState);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Mugen.AI_Type o = (Mugen.AI_Type)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

