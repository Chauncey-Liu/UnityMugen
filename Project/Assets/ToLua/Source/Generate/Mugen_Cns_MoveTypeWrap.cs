//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Mugen_Cns_MoveTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Mugen.Cns_MoveType));
		L.RegVar("none", get_none, null);
		L.RegVar("A", get_A, null);
		L.RegVar("I", get_I, null);
		L.RegVar("H", get_H, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<Mugen.Cns_MoveType>.Check = CheckType;
		StackTraits<Mugen.Cns_MoveType>.Push = Push;
	}

	static void Push(IntPtr L, Mugen.Cns_MoveType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(Mugen.Cns_MoveType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_none(IntPtr L)
	{
		ToLua.Push(L, Mugen.Cns_MoveType.none);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_A(IntPtr L)
	{
		ToLua.Push(L, Mugen.Cns_MoveType.A);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_I(IntPtr L)
	{
		ToLua.Push(L, Mugen.Cns_MoveType.I);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_H(IntPtr L)
	{
		ToLua.Push(L, Mugen.Cns_MoveType.H);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Mugen.Cns_MoveType o = (Mugen.Cns_MoveType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

