//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BaseResLoaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BaseResLoader), typeof(Utils.CachedMonoBehaviour));
		L.RegFunction("ClearAllResources", ClearAllResources);
		L.RegFunction("LoadMaterial", LoadMaterial);
		L.RegFunction("ClearMaterials", ClearMaterials);
		L.RegFunction("ClearMaterial", ClearMaterial);
		L.RegFunction("InstantiateGameObj", InstantiateGameObj);
		L.RegFunction("LoadSprite", LoadSprite);
		L.RegFunction("LoadGameObject", LoadGameObject);
		L.RegFunction("ClearGameObject", ClearGameObject);
		L.RegFunction("ClearMaterail", ClearMaterail);
		L.RegFunction("ClearTexture", ClearTexture);
		L.RegFunction("LoadTexture", LoadTexture);
		L.RegFunction("ClearShader", ClearShader);
		L.RegFunction("LoadShader", LoadShader);
		L.RegFunction("ClearAudioClip", ClearAudioClip);
		L.RegFunction("LoadAudioClip", LoadAudioClip);
		L.RegFunction("ClearAnimationClip", ClearAnimationClip);
		L.RegFunction("LoadAnimationClip", LoadAnimationClip);
		L.RegFunction("ClearFont", ClearFont);
		L.RegFunction("LoadFont", LoadFont);
		L.RegFunction("ClearAniController", ClearAniController);
		L.RegFunction("LoadAniController", LoadAniController);
		L.RegFunction("DestroyGameObj", DestroyGameObj);
		L.RegFunction("GetResList", GetResList);
		L.RegFunction("ClearMainTexture", ClearMainTexture);
		L.RegFunction("LoadMainTexture", LoadMainTexture);
		L.RegFunction("CreateGameObject", CreateGameObject);
		L.RegFunction("LoadMaterialAsync", LoadMaterialAsync);
		L.RegFunction("LoadMainTextureAsync", LoadMainTextureAsync);
		L.RegFunction("LoadFontAsync", LoadFontAsync);
		L.RegFunction("LoadAniControllerAsync", LoadAniControllerAsync);
		L.RegFunction("LoadSpriteAsync", LoadSpriteAsync);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("_cMainTex", get__cMainTex, null);
		L.RegVar("_cMainMat", get__cMainMat, null);
		L.RegVar("_cMat1", get__cMat1, null);
		L.RegVar("_cMat2", get__cMat2, null);
		L.RegVar("_cMat3", get__cMat3, null);
		L.RegFunction("OnGetItem_UnityEngine_MeshRenderer", BaseResLoader_OnGetItem_UnityEngine_MeshRenderer);
		L.RegFunction("OnGetItem_UnityEngine_SpriteRenderer", BaseResLoader_OnGetItem_UnityEngine_SpriteRenderer);
		L.RegFunction("OnGetItem_UnityEngine_TextMesh", BaseResLoader_OnGetItem_UnityEngine_TextMesh);
		L.RegFunction("OnGetItem_UnityEngine_Animator", BaseResLoader_OnGetItem_UnityEngine_Animator);
		L.RegFunction("OnGetItem1_UnityEngine_SpriteRenderer", BaseResLoader_OnGetItem1_UnityEngine_SpriteRenderer);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAllResources(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			obj.ClearAllResources();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMaterial(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Material, string>(L, 2))
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				bool o = obj.LoadMaterial(ref arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.Push(L, arg0);
				return 2;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.SpriteRenderer, string>(L, 2))
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				UnityEngine.SpriteRenderer arg0 = (UnityEngine.SpriteRenderer)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				bool o = obj.LoadMaterial(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.MeshRenderer, string>(L, 2))
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				UnityEngine.MeshRenderer arg0 = (UnityEngine.MeshRenderer)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				bool o = obj.LoadMaterial(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BaseResLoader.LoadMaterial");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearMaterials(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.MeshRenderer arg0 = (UnityEngine.MeshRenderer)ToLua.CheckObject(L, 2, typeof(UnityEngine.MeshRenderer));
			obj.ClearMaterials(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearMaterial(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.SpriteRenderer arg0 = (UnityEngine.SpriteRenderer)ToLua.CheckObject(L, 2, typeof(UnityEngine.SpriteRenderer));
			obj.ClearMaterial(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InstantiateGameObj(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			UnityEngine.GameObject o = BaseResLoader.InstantiateGameObj(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSprite(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				UnityEngine.SpriteRenderer arg0 = (UnityEngine.SpriteRenderer)ToLua.CheckObject(L, 2, typeof(UnityEngine.SpriteRenderer));
				string arg1 = ToLua.CheckString(L, 3);
				bool o = obj.LoadSprite(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				UnityEngine.SpriteRenderer arg0 = (UnityEngine.SpriteRenderer)ToLua.CheckObject(L, 2, typeof(UnityEngine.SpriteRenderer));
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				bool o = obj.LoadSprite(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BaseResLoader.LoadSprite");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.LoadGameObject(ref arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushSealed(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.ClearGameObject(ref arg0);
			ToLua.PushSealed(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearMaterail(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 2);
			obj.ClearMaterail(ref arg0);
			ToLua.Push(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearTexture(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				UnityEngine.Texture arg0 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				obj.ClearTexture(ref arg0);
				ToLua.Push(L, arg0);
				return 1;
			}
			else if (count == 3)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				UnityEngine.MeshRenderer arg0 = (UnityEngine.MeshRenderer)ToLua.CheckObject(L, 2, typeof(UnityEngine.MeshRenderer));
				string arg1 = ToLua.CheckString(L, 3);
				obj.ClearTexture(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BaseResLoader.ClearTexture");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadTexture(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				UnityEngine.Texture arg0 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				bool o = obj.LoadTexture(ref arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.Push(L, arg0);
				return 2;
			}
			else if (count == 4)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				UnityEngine.MeshRenderer arg0 = (UnityEngine.MeshRenderer)ToLua.CheckObject(L, 2, typeof(UnityEngine.MeshRenderer));
				string arg1 = ToLua.CheckString(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				bool o = obj.LoadTexture(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BaseResLoader.LoadTexture");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearShader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.Shader arg0 = (UnityEngine.Shader)ToLua.CheckObject(L, 2, typeof(UnityEngine.Shader));
			obj.ClearShader(ref arg0);
			ToLua.PushSealed(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadShader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.Shader arg0 = (UnityEngine.Shader)ToLua.CheckObject(L, 2, typeof(UnityEngine.Shader));
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.LoadShader(ref arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushSealed(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAudioClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioClip));
			obj.ClearAudioClip(ref arg0);
			ToLua.PushSealed(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAudioClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioClip));
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.LoadAudioClip(ref arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushSealed(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAnimationClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckObject(L, 2, typeof(UnityEngine.AnimationClip));
			obj.ClearAnimationClip(ref arg0);
			ToLua.PushSealed(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAnimationClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.AnimationClip arg0 = (UnityEngine.AnimationClip)ToLua.CheckObject(L, 2, typeof(UnityEngine.AnimationClip));
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.LoadAnimationClip(ref arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushSealed(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearFont(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.TextMesh arg0 = (UnityEngine.TextMesh)ToLua.CheckObject(L, 2, typeof(UnityEngine.TextMesh));
			obj.ClearFont(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFont(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.TextMesh arg0 = (UnityEngine.TextMesh)ToLua.CheckObject(L, 2, typeof(UnityEngine.TextMesh));
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.LoadFont(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAniController(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject(L, 2, typeof(UnityEngine.Animator));
			obj.ClearAniController(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAniController(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject(L, 2, typeof(UnityEngine.Animator));
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.LoadAniController(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyGameObj(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			BaseResLoader.DestroyGameObj(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			System.Collections.Generic.List<UnityEngine.Object> o = obj.GetResList();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearMainTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.MeshRenderer arg0 = (UnityEngine.MeshRenderer)ToLua.CheckObject(L, 2, typeof(UnityEngine.MeshRenderer));
			obj.ClearMainTexture(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMainTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
			UnityEngine.MeshRenderer arg0 = (UnityEngine.MeshRenderer)ToLua.CheckObject(L, 2, typeof(UnityEngine.MeshRenderer));
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.LoadMainTexture(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.GameObject o = BaseResLoader.CreateGameObject(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMaterialAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<BaseResLoader.OnGetItem<UnityEngine.SpriteRenderer>>(L, 4))
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				BaseResLoader.OnGetItem<UnityEngine.SpriteRenderer> arg2 = (BaseResLoader.OnGetItem<UnityEngine.SpriteRenderer>)ToLua.ToObject(L, 4);
				obj.LoadMaterialAsync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<BaseResLoader.OnGetItem<UnityEngine.MeshRenderer>>(L, 4))
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				BaseResLoader.OnGetItem<UnityEngine.MeshRenderer> arg2 = (BaseResLoader.OnGetItem<UnityEngine.MeshRenderer>)ToLua.ToObject(L, 4);
				obj.LoadMaterialAsync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<BaseResLoader.OnGetItem<UnityEngine.MeshRenderer>, float>(L, 4))
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				BaseResLoader.OnGetItem<UnityEngine.MeshRenderer> arg2 = (BaseResLoader.OnGetItem<UnityEngine.MeshRenderer>)ToLua.ToObject(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				obj.LoadMaterialAsync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<BaseResLoader.OnGetItem<UnityEngine.SpriteRenderer>, float>(L, 4))
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				BaseResLoader.OnGetItem<UnityEngine.SpriteRenderer> arg2 = (BaseResLoader.OnGetItem<UnityEngine.SpriteRenderer>)ToLua.ToObject(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				obj.LoadMaterialAsync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BaseResLoader.LoadMaterialAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadMainTextureAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				BaseResLoader.OnGetItem<UnityEngine.MeshRenderer> arg2 = (BaseResLoader.OnGetItem<UnityEngine.MeshRenderer>)ToLua.CheckDelegate<BaseResLoader.OnGetItem<UnityEngine.MeshRenderer>>(L, 4);
				obj.LoadMainTextureAsync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				BaseResLoader.OnGetItem<UnityEngine.MeshRenderer> arg2 = (BaseResLoader.OnGetItem<UnityEngine.MeshRenderer>)ToLua.CheckDelegate<BaseResLoader.OnGetItem<UnityEngine.MeshRenderer>>(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				obj.LoadMainTextureAsync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BaseResLoader.LoadMainTextureAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFontAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				BaseResLoader.OnGetItem<UnityEngine.TextMesh> arg2 = (BaseResLoader.OnGetItem<UnityEngine.TextMesh>)ToLua.CheckDelegate<BaseResLoader.OnGetItem<UnityEngine.TextMesh>>(L, 4);
				obj.LoadFontAsync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				BaseResLoader.OnGetItem<UnityEngine.TextMesh> arg2 = (BaseResLoader.OnGetItem<UnityEngine.TextMesh>)ToLua.CheckDelegate<BaseResLoader.OnGetItem<UnityEngine.TextMesh>>(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				obj.LoadFontAsync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BaseResLoader.LoadFontAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAniControllerAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				BaseResLoader.OnGetItem<UnityEngine.Animator> arg2 = (BaseResLoader.OnGetItem<UnityEngine.Animator>)ToLua.CheckDelegate<BaseResLoader.OnGetItem<UnityEngine.Animator>>(L, 4);
				obj.LoadAniControllerAsync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				BaseResLoader.OnGetItem<UnityEngine.Animator> arg2 = (BaseResLoader.OnGetItem<UnityEngine.Animator>)ToLua.CheckDelegate<BaseResLoader.OnGetItem<UnityEngine.Animator>>(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				obj.LoadAniControllerAsync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BaseResLoader.LoadAniControllerAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSpriteAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				BaseResLoader.OnGetItem1<UnityEngine.SpriteRenderer> arg2 = (BaseResLoader.OnGetItem1<UnityEngine.SpriteRenderer>)ToLua.CheckDelegate<BaseResLoader.OnGetItem1<UnityEngine.SpriteRenderer>>(L, 4);
				obj.LoadSpriteAsync(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				BaseResLoader obj = (BaseResLoader)ToLua.CheckObject<BaseResLoader>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				BaseResLoader.OnGetItem1<UnityEngine.SpriteRenderer> arg2 = (BaseResLoader.OnGetItem1<UnityEngine.SpriteRenderer>)ToLua.CheckDelegate<BaseResLoader.OnGetItem1<UnityEngine.SpriteRenderer>>(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				obj.LoadSpriteAsync(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BaseResLoader.LoadSpriteAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__cMainTex(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, BaseResLoader._cMainTex);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__cMainMat(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, BaseResLoader._cMainMat);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__cMat1(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, BaseResLoader._cMat1);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__cMat2(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, BaseResLoader._cMat2);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__cMat3(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, BaseResLoader._cMat3);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BaseResLoader_OnGetItem_UnityEngine_MeshRenderer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<BaseResLoader.OnGetItem<UnityEngine.MeshRenderer>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<BaseResLoader.OnGetItem<UnityEngine.MeshRenderer>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BaseResLoader_OnGetItem_UnityEngine_SpriteRenderer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<BaseResLoader.OnGetItem<UnityEngine.SpriteRenderer>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<BaseResLoader.OnGetItem<UnityEngine.SpriteRenderer>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BaseResLoader_OnGetItem_UnityEngine_TextMesh(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<BaseResLoader.OnGetItem<UnityEngine.TextMesh>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<BaseResLoader.OnGetItem<UnityEngine.TextMesh>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BaseResLoader_OnGetItem_UnityEngine_Animator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<BaseResLoader.OnGetItem<UnityEngine.Animator>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<BaseResLoader.OnGetItem<UnityEngine.Animator>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BaseResLoader_OnGetItem1_UnityEngine_SpriteRenderer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<BaseResLoader.OnGetItem1<UnityEngine.SpriteRenderer>>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<BaseResLoader.OnGetItem1<UnityEngine.SpriteRenderer>>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

